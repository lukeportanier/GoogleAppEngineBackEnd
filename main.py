#End Points

import os
import random
from flask import Flask
from gcloud import storage

app = Flask(__name__)

@app.route("/")
def index():
    instance_id = os.environ.get("GAE_INSTANCE", "unknown")
    return "Instance_Id: "+instance_id

#End Points

import os
import random
from flask import Flask
import pymysql

DB_HOST = "cloud-test-1232:europe-west1:db-instance"
DB_USER = "api"
DB_PASSWORD = "YOtaPe7zrDlb0BiIMFCxmpSt"
DB_NAME = "random-number-storage"
TABLE_NAME = "storagedata"

app = Flask(__name__)

@app.route("/")
def index():
    instance_id = os.environ.get("GAE_INSTANCE", "unknown")
    return "Instance_Id: "+instance_id

app.route("/GenerateNumbers")
def GenerateNumbers():
    instance_id = os.environ.get("GAE_INSTANCE", "unknown")

    # Generate a random number
    random_number = random.randint(0, 100000)

    # Insert the random number and instance ID into the database
    conn = pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)
    cursor = conn.cursor()
    cursor.execute(f"INSERT INTO {TABLE_NAME} (number, instance_id) VALUES ({random_number}, '{instance_id}')")
    conn.commit()
    conn.close()

    # Return a response to the client
    return f"Random Number {random_number} Has Been Generated and Stored in MySQL Database"

@app.route('/GetResults')
def GetResults():
    # Connect to the database
    conn = pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)

    # Query the database to get the smallest and largest numbers and their instance IDs
    with conn.cursor() as cursor:
        cursor.execute(f"SELECT number, instance FROM {TABLE_NAME}")
        results = cursor.fetchall()
        random_numbers_with_instance = [f"{row[0]}|{row[1]}" for row in results]

    # Display smallest and largest numbers with their respective instance IDs
    smallest_number_with_instance = min(random_numbers_with_instance)
    largest_number_with_instance = max(random_numbers_with_instance)
    smallest_number, smallest_instance = smallest_number_with_instance.split('|')
    largest_number, largest_instance = largest_number_with_instance.split('|')

    # Close the database connection
    conn.close()

    return f"Smallest Number Generated by Instance {smallest_instance}: {smallest_number}\nLargest Number Generated by Instance {largest_instance}: {largest_number}"

if __name__ == '__main__':
    app.run()
