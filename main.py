import os
import random
from flask import Flask
import mysql.connector

DB_USER = "api"
DB_PASSWORD = "YOtaPe7zrDlb0BiIMFCxmpSt"
DB_NAME = "random-number-storage"
CLOUD_SQL_CONNECTION_NAME = "cloud-test-1232:europe-west1:db-instance"

app = Flask(__name__)

def get_db():
    # Configure the database connection
    config = {
        "user": DB_USER,
        "password": DB_PASSWORD,
        "database": DB_NAME,
        "unix_socket": f"/cloudsql/{CLOUD_SQL_CONNECTION_NAME}"
    }

    # Connect to the database using the Cloud SQL Proxy
    return mysql.connector.connect(**config)

@app.route("/")
def index():
    instance_id = os.environ.get("GAE_INSTANCE", "unknown")
    return "Instance_Id: "+instance_id

@app.route("/GenerateNumbers")
def GenerateNumbers():
    instance_id = os.environ.get("GAE_INSTANCE", "unknown")

    random_number = random.randint(0, 100000)

    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(f"INSERT INTO storagedata (number, instance) VALUES ({random_number}, '{instance_id}')")
    conn.commit()
    conn.close()
    
    return f"Random Number {random_number} Has Been Generated and Stored in MySQL Database"

@app.route("/GetResults")
def GetResults():
    conn = get_db()

    smallest_number = 0
    smallest_instance = 0
    largest_number = 0
    largest_instance = 0
    html_table = ""

    with conn.cursor() as cursor:
        cursor.execute("SELECT number, instance FROM storagedata WHERE number = (SELECT MIN(number) FROM storagedata)")
        result = cursor.fetchall()
        smallest_number = result[0][0]
        smallest_instance = result[0][1]

        cursor.execute("SELECT number, instance FROM storagedata WHERE number = (SELECT MAX(number) FROM storagedata)")
        result = cursor.fetchall()
        largest_number = result[0][0]
        largest_instance = result[0][1]

        cursor.execute("SELECT instance, COUNT(*) AS num_generated FROM storagedata GROUP BY instance")
        result_set = cursor.fetchall()
        
        # Generate HTML table
        html_table = "<table><tr><th>Instance</th><th>Num Generated</th></tr>"
        for row in result_set:
            html_table += f"<tr><td>{row[0]}</td><td style='text-align: center'>{row[1]}</td></tr>"
        html_table += "</table>"


    conn.close()

    smallest_largest_message = f"<p>{smallest_number} was the smallest number generated by the system, it was generated by Instance: {smallest_instance}.</p><p>{largest_number} was the largest number generated by the system, it was generated by Instance: {largest_instance}.</p>"

    return smallest_largest_message + "<br><br><br>" + html_table

@app.route("/DeleteAllRows", methods=["POST"])
def delete_all_rows():
    conn = get_db()

    with conn.cursor() as cursor:
        cursor.execute("DELETE FROM storagedata")
        conn.commit()

    conn.close()

    return "All rows deleted from the table."

if __name__ == '__main__':
    app.run()
