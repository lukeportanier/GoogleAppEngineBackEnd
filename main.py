#Functions

import random

def GenerateRandomNumbers():
    random_numbers = []
    for i in range(1000):
        random_numbers.append(random.randint(0, 100000))

    return random_numbers

#End Points

from flask import Flask
from gcloud import storage
import requests
from google.auth import compute_engine
from google.auth.transport.requests import Request
import google.auth.transport.requests

app = Flask(__name__)

random_numbers_storage = 'random-numbers-storage'

@app.route('/')
def root():
    return 'This is the Api'

from google.auth import compute_engine
from google.auth.transport.requests import Request
import google.auth.transport.requests

@app.route('/GenerateNumbers')
def GenerateNumbers():
    credentials = compute_engine.Credentials()
    transport = google.auth.transport.requests.Request()
    instance_id_url = 'http://metadata.google.internal/computeMetadata/v1/instance/id'
    instance_id_headers = {'Metadata-Flavor': 'Google'}
    instance_id_request = google.auth.transport.requests.Request()
    instance_id_response = instance_id_request(method='GET', url=instance_id_url, headers=instance_id_headers, credentials=credentials)
    instance_id = instance_id_response.text
    random_numbers = [random.randint(0,1000) for i in range(100000)]
    numbers_with_instance_id = [f'{number}, {instance_id}' for number in random_numbers]
    blob_name = 'random_numbers_with_instance_id.txt'

    storage_client = storage.Client()
    bucket = storage_client.get_bucket(random_numbers_storage)

    blob = bucket.blob(blob_name)
    blob.upload_from_string('\n'.join(numbers_with_instance_id))
    
    return f'Random numbers have been generated on instance {instance_id} and uploaded to Cloud Storage in blob {blob_name}.'

@app.route('/GetResults')
def GetResults():
    storage_client = storage.Client()
    bucket = storage_client.get_bucket(random_numbers_storage)

    blob = bucket.blob('random_numbers_with_instance_id.txt')
    content = blob.download_as_string().decode('utf-8')
    number_instances = [line.strip().split(',') for line in content.split('\n') if line]

    # Extract numbers and instance IDs into separate lists
    random_numbers = [int(number_instance[0]) for number_instance in number_instances]
    instance_ids = [number_instance[1].strip() for number_instance in number_instances]

    # Find the smallest and largest numbers and their associated instance IDs
    smallest = float('inf')
    largest = float('-inf')
    smallest_instance_id = ''
    largest_instance_id = ''
    for number, instance_id in zip(random_numbers, instance_ids):
        if number < smallest:
            smallest = number
            smallest_instance_id = instance_id
        if number > largest:
            largest = number
            largest_instance_id = instance_id

    # Combine the results from all instances into a single response
    response = "Smallest Number Generated by System: " + str(smallest) + " (generated by instance " + smallest_instance_id + ")\n"
    response += "Largest Number Generated by System: " + str(largest) + " (generated by instance " + largest_instance_id + ")\n"
    response += "Instances that generated numbers:\n" + '\n'.join(instance_ids)

    return response


if __name__ == '__main__':
    app.run()
